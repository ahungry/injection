* Injection
Dependency Injection for Common Lisp.

* Example calls
Set up a config file similar to the one found in examples/config.yml
(modeled after the PHP Symfony framework config):

#+BEGIN_SRC yml
parameters:
  foo: bar
  an_array: [1, 2, 3]

services:
  my_service:
    factory: my-function-that-returns-the-class-instance
    arguments: ["first argument"]

  dependent_service:
    factory: another-function-that-returns-the-class
    arguments: ["@my_service", "second argument"]
#+END_SRC

Then load up your config file with:

#+BEGIN_SRC lisp
(injection:Container-Factory "/full/path/to/examples/config.yml" :singleton t)
#+END_SRC

This will create a global singleton instance of the last loaded config
that is stored in
#+BEGIN_SRC lisp
*container-singleton*
#+END_SRC
that you can access parameters and services from with these calls.

Access a parameter within it by using:
#+BEGIN_SRC lisp
(get-parameter "foo") -> "bar"
(get-parameter "an_array") -> '(1 2 3)
#+END_SRC

Access a service within it by using:
#+BEGIN_SRC lisp
(get-service "my_service") -> <MyService #abc123>
(get-service "dependent_service") -> <DependentService #abc123>
#+END_SRC

* I will not use global scope Pam I am, I will not in a can
Ok, so, not a fan of global state, I understand.

You can avoid any global state by not specifying the singleton keyword
up above, and instead using the package as follows:

#+BEGIN_SRC lisp
(use-package :injection)

(let ((my-container (Container-Factory "example/config.yml")))
           (Container-Get-Parameter my-container "foo")) -> "bar"
#+END_SRC

Or even simplified to (assuming you only need one value out of there:
#+BEGIN_SRC lisp
(injection:Container-Get-Parameter (injection:Container-Factory "example/config.yml") "foo") -> "bar"
#+END_SRC

* Still on the agenda                                                  :TODO:
Need to add service/class instancing (so when a service is specified
in the file, the #'get-service call will return an instanced version
of said service, with the arguments that are filled out in the yml file.

* Installation
Clone the repository (you do know how to git clone by now right?)

Load the system with:
#+BEGIN_SRC lisp
(ql:quickload :injection)
(use-package :injection)
#+END_SRC

* License
GPLv3
